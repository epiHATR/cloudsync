name: Create Release
on:
  workflow_dispatch:
    inputs:
      ReleaseType:
        required: false
        description: Create Github Release
        type: choice
        options:
          - Pre-Released
          - Released
      PublishImage:
        required: false
        description: Publish Docker Images
        default: true
        type: boolean
jobs:
  CreateRelease:
    name: Release Cloudsync CLI
    runs-on: "ubuntu-latest"
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    outputs:
      tag: ${{ steps.version.outputs.tag }}
      commit: ${{ steps.version.outputs.commit }}
      build: ${{ steps.version.outputs.build }}
      releaseDate: ${{ steps.version.outputs.releaseDate }}

    steps:
      - uses: actions/checkout@v3

      - name: Fetch all tags
        run: |
          git fetch --tags
          git fetch --prune --unshallow

      - name: Install zip
        run: sudo apt-get install zip

      - name: Install Go
        run: |
          sudo apt-get update
          sudo apt-get upgrade
          wget https://dl.google.com/go/go1.18.5.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go1.18.5.linux-amd64.tar.gz

          export GOROOT=/usr/local/go
          export GOPATH=$HOME/go
          export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
          source ~/.bashrc

          go version

      - name: Build with version
        id: version
        run: |
          export GOROOT=/usr/local/go
          export GOPATH=$HOME/go
          export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
          source ~/.bashrc

          previousTag=$(git tag --sort=committerdate | tail -1)
          build=${{ github.run_number }}
          releaseDate=`date -u +%Y-%m-%d`
          releaseTime=`date -u +%H:%M:%S`
          commitSHA=$(echo $(git log --pretty=format:"%H" HEAD^...HEAD) | awk '{print $1}')

          echo "-X 'cloudsync/cmd.commit=$commitSHA'  -X 'cloudsync/cmd.build=$build' -X 'cloudsync/cmd.releaseDate=${releaseDate} ${releaseTime}'"

          hardCodeVersion=$(go run -ldflags "\
                                    -X 'cloudsync/cmd.commit=$commitSHA' \
                                    -X 'cloudsync/cmd.build=$build' \
                                    -X 'cloudsync/cmd.releaseDate=${releaseDate} ${releaseTime}'" \
                                    main.go version -s)
          
          if [[ "${{ github.event.inputs.ReleaseType }}" == "Pre-Released" ]]
          then
            version="$hardCodeVersion-pre-$build"
            echo $version
          else
            version="$hardCodeVersion"
            echo $version
          fi
          echo "::notice title=Version :: ${version}"
          currentTag=$version

          # ONLY RELEASE GITHUB PACKAGE IF RELEASE_TYPE = RELEASED
          if [[ "${{ github.event.inputs.ReleaseType }}" == "Released" ]]
          then
            git tag $currentTag
            git push --tags

            IFS='' && releaseText=$(git log --pretty=format:"%h | %s"  $currentTag ^$previousTag)
            echo "### Features: " > body.txt
            echo $releaseText >> body.txt
            echo "SHA: $commitSHA" >> body.txt

            echo "Start release Linux AMD64 binary"
            GOOS=linux GOARCH=amd64 go build -ldflags "-X 'cloudsync/cmd.commit=$commitSHA' -X 'cloudsync/cmd.build=$build' -X 'cloudsync/cmd.releaseDate=${releaseDate} ${releaseTime}' -s -w" -o "release/linux-amd64-$version/cloudsync" cloudsync
            cd release/linux-amd64-$version
            ./cloudsync version
            tar -czvf linux-amd64-$version.tar.gz cloudsync
            cd ..
            cd ..

            echo "Start release Darwin ARM64 binary"
            GOOS=darwin GOARCH=arm64 go build -ldflags "-X 'cloudsync/cmd.commit=$commitSHA' -X 'cloudsync/cmd.build=$build' -X 'cloudsync/cmd.releaseDate=${releaseDate} ${releaseTime}' -s -w" -o "release/darwin-arm64-$version/cloudsync" cloudsync
            cd release/darwin-arm64-$version
            tar -czvf darwin-arm64-$version.tar.gz cloudsync
            cd ..
            cd ..

            echo "Start release Windows AMD64 executable file"
            GOOS=windows GOARCH=amd64 go build -ldflags "-X 'cloudsync/cmd.commit=$commitSHA' -X 'cloudsync/cmd.build=$build' -X 'cloudsync/cmd.releaseDate=${releaseDate} ${releaseTime}' -s -w" -o "release/windows-amd64-$version/cloudsync" cloudsync
            cd release/windows-amd64-$version
            mv cloudsync cloudsync.exe
            zip -r windows-amd64-$version.zip cloudsync.exe
            cd ..
            cd ..
          fi

          echo "exporting output for other step"
          echo commit=$commitSHA >> $GITHUB_OUTPUT
          echo build=$build >> $GITHUB_OUTPUT
          echo releaseDate="${releaseDate} ${releaseTime}" >> $GITHUB_OUTPUT
          echo tag=$currentTag >> $GITHUB_OUTPUT

      - name: Release
        if: ${{ github.event.inputs.ReleaseType == 'Released' }}
        uses: softprops/action-gh-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: cloudsync CLI ${{ steps.version.outputs.tag }}
          body_path: body.txt
          draft: false
          files: |
            ./release/linux-amd64-${{ steps.version.outputs.tag }}/linux-amd64-${{ steps.version.outputs.tag }}.tar.gz
            ./release/darwin-arm64-${{ steps.version.outputs.tag }}/darwin-arm64-${{ steps.version.outputs.tag }}.tar.gz
            ./release/windows-amd64-${{ steps.version.outputs.tag }}/windows-amd64-${{ steps.version.outputs.tag }}.zip

  PublishDockerImage:
    if: ${{ github.event.inputs.PublishImage == 'true' }}
    name: Publish Docker
    runs-on: "ubuntu-latest"
    needs: [CreateRelease]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push latest
        if: ${{ github.event.inputs.ReleaseType == 'Released' }}
        uses: docker/build-push-action@v4
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            COMMIT=${{ needs.CreateRelease.outputs.commit}}
            BUILD=${{ needs.CreateRelease.outputs.build}}
            RELEASE_DATE="${{ needs.CreateRelease.outputs.releaseDate}}"
          tags: |
            cloudsync/cloudsync:${{ needs.CreateRelease.outputs.tag}}
            cloudsync/cloudsync:latest

      - name: Build and push pre-released
        if: ${{ github.event.inputs.ReleaseType == 'Pre-Released' }}
        uses: docker/build-push-action@v4
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            COMMIT=${{ needs.CreateRelease.outputs.commit}}
            BUILD=${{ needs.CreateRelease.outputs.build}}
            RELEASE_DATE="${{ needs.CreateRelease.outputs.releaseDate}}"
          tags: |
            cloudsync/cloudsync:${{ needs.CreateRelease.outputs.tag}}
